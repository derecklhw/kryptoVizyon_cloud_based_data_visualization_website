import { plotData } from "./plotData.mjs";

//Axios will handle HTTP requests to web service
import axios from "axios";

//The ID of the student whose data you want to plot
let studentID = process.env.STUDENT_ID;

//URL where student data is available
let url = "https://y2gtfx0jg3.execute-api.us-east-1.amazonaws.com/prod/";

export const handler = async (event) => {
  try {
    //Get synthetic data
    let yValues = (await axios.get(url + studentID)).data.target;

    //Add basic X values for plot
    let xValues = [];
    for (let i = 0; i < yValues.length; ++i) {
      xValues.push(i);
    }

    let xValuesCount = xValues.length;

    let xPredictionValues = [xValuesCount];
    let yMeanValues = [
      642.9791259766, 642.2883300781, 669.8716430664, 682.9846801758,
      663.2948608398, 674.8392333984, 677.6063842773, 689.979675293,
      691.4299926758, 703.9631347656, 698.3810424805, 696.7542114258,
      688.4367675781, 694.9332885742, 691.841796875, 681.811340332,
      664.2129516602, 665.643371582, 660.6831054688, 681.9312744141,
      693.4011230469, 673.5980224609, 672.1146850586, 672.0856933594,
      682.9389038086, 659.6052856445, 683.3778686523, 694.6884155273,
      718.6199951172, 716.3276367188, 714.5877075195, 737.2846069336,
      739.2397460938, 752.1182250977, 745.8239135742, 748.0108032227,
      738.0318603516, 739.628112793, 735.6129150391, 737.0829467773,
      735.9932250977, 717.5144042969, 712.8236083984, 729.8502197266,
      729.6829833984, 730.4322509766, 723.7567138672, 708.2190551758,
      714.5532836914, 716.9904174805,
    ];
    let yLowerQuantileValues = [
      608.3310546875, 612.2760009766, 638.6182861328, 646.4794921875,
      641.6134033203, 640.4904174805, 647.2615966797, 660.6091308594,
      657.8899536133, 667.6961669922, 657.6760253906, 665.8949584961,
      657.2583618164, 657.2531738281, 670.7134399414, 647.7360839844,
      621.3397216797, 631.5737304688, 634.3317260742, 652.9447021484,
      658.1752929688, 644.0080566406, 644.6397705078, 636.4537353516,
      638.9661254883, 623.8372192383, 644.0394897461, 653.3861694336,
      686.6455688477, 685.5888671875, 674.5438842773, 702.6036376953,
      705.5616455078, 719.9429321289, 715.9899902344, 709.2825317383,
      710.725769043, 700.3068237305, 696.02734375, 691.169128418,
      694.7551269531, 688.7405395508, 678.5853881836, 692.8598022461,
      695.2356567383, 689.8853149414, 692.5723876953, 671.5579223633,
      687.9865722656, 667.5405883789,
    ];
    let yUpperQuantileValues = [
      676.4268188477, 666.8308105469, 701.2772827148, 729.3967285156,
      693.5587768555, 699.1393432617, 706.4899291992, 720.3138427734,
      722.1295166016, 754.7514648438, 738.0484008789, 732.4759521484,
      730.1958618164, 734.5492553711, 721.5698852539, 722.4344482422,
      700.6828613281, 706.8233642578, 695.7587890625, 711.8266601562,
      733.899597168, 703.5090942383, 705.9934082031, 713.1323852539,
      720.5546875, 699.4315795898, 736.770690918, 733.315246582, 742.6325683594,
      762.0900268555, 759.3274536133, 775.5603637695, 784.075012207,
      790.6376342773, 777.928894043, 786.3439941406, 779.9846801758,
      780.3472290039, 771.467956543, 787.1382446289, 782.4097900391,
      756.4699707031, 759.0277709961, 773.62109375, 771.0860595703,
      765.5943603516, 767.3746948242, 751.9498901367, 743.8854370117,
      754.8162841797,
    ];

    for (let i = 1; i < yMeanValues.length + 1; ++i) {
      xPredictionValues.push(i + xValuesCount);
    }

    //Call function to plot data
    let plotResult = await plotData(
      studentID,
      xValues,
      yValues,
      xPredictionValues,
      yMeanValues,
      yLowerQuantileValues,
      yUpperQuantileValues
    );
    console.log(
      "Plot for student '" + studentID + "' available at: " + plotResult.url
    );

    return {
      statusCode: 200,
      body: "Ok",
    };
  } catch (err) {
    console.log("ERROR: " + JSON.stringify(err));
    return {
      statusCode: 500,
      body: "Error plotting data for student ID: " + studentID,
    };
  }
};
